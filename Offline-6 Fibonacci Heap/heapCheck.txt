Initial Heap (heap1)
Tree 1: (16,16)
Tree 2: (1,1)
Tree 3: (2,2)
Tree 4: (3,3)
Tree 5: (4,4)
Tree 6: (5,5)
Tree 7: (6,6)
Tree 8: (7,7)
Tree 9: (8,8)
Tree 10: (9,9)
Tree 11: (10,10)
Tree 12: (11,11)
Tree 13: (12,12)
Tree 14: (13,13)
Tree 15: (14,14)
Tree 16: (15,15)
Extracting max from heap 1...
Tree 1: (15,15)
Tree 2: (14,14)->(13,13)
Tree 3: (12,12)->(11,11),(10,10)
        (10,10)->(9,9)
Tree 4: (8,8)->(7,7),(6,6),(4,4)
        (6,6)->(5,5)
        (4,4)->(3,3),(2,2)
                (2,2)->(1,1)
Testing increase_key operation...
Tree 1: (15,15)
Tree 2: (14,14)->(13,13)
Tree 3: (12,12)->(11,11),(10,10)
        (10,10)->(9,9)
Tree 4: (8,8)->(7,7),(6,6),(4,4)
        (6,6)->(5,5)
        (4,4)->(3,3),(2,2)
Tree 5: (8,1)
Testing increase_key operation...
Tree 1: (15,15)
Tree 2: (14,14)->(13,13)
Tree 3: (12,12)->(11,11),(10,10)
        (10,10)->(9,9)
Tree 4: (8,8)->(7,7),(6,6),(4,4)
        (6,6)->(5,5)
        (4,4)->(2,2)
Tree 5: (8,1)
Tree 6: (13,3)
Testing increase_key operation...
Tree 1: (15,15)
Tree 2: (14,14)->(13,13)
Tree 3: (12,12)->(11,11),(10,10)
        (10,10)->(9,9)
Tree 4: (8,8)->(7,7),(6,6),(4,4)
        (4,4)->(2,2)
Tree 5: (8,1)
Tree 6: (13,3)
Tree 7: (14,5)
Testing increase_key operation...
Tree 1: (15,15)
Tree 2: (14,14)->(13,13)
Tree 3: (12,12)->(11,11),(10,10)
        (10,10)->(9,9)
Tree 4: (8,8)->(7,7),(6,6)
Tree 5: (8,1)
Tree 6: (13,3)
Tree 7: (14,5)
Tree 8: (12,2)
Tree 9: (4,4)
Delete operation...
Tree 1: (15,15)->(14,14),(4,4),(12,12)
        (14,14)->(13,13)
        (12,12)->(11,11),(10,10)
                (10,10)->(9,9)
Tree 2: (14,5)
Tree 3: (13,3)->(8,1)
Tree 4: (8,8)->(7,7),(6,6)
Initial Heap (heap2)
Tree 1: (34,34)
Tree 2: (17,17)
Tree 3: (18,18)
Tree 4: (19,19)
Tree 5: (20,20)
Tree 6: (21,21)
Tree 7: (22,22)
Tree 8: (23,23)
Tree 9: (24,24)
Tree 10: (25,25)
Tree 11: (26,26)
Tree 12: (27,27)
Tree 13: (28,28)
Tree 14: (29,29)
Tree 15: (30,30)
Tree 16: (31,31)
Tree 17: (32,32)
Tree 18: (33,33)
Extracting max for 5 times from heap2...#1
Tree 1: (33,33)
Tree 2: (32,32)->(31,31),(30,30),(28,28),(24,24)
        (30,30)->(29,29)
        (28,28)->(27,27),(26,26)
                (26,26)->(25,25)
        (24,24)->(23,23),(22,22),(20,20)
                (22,22)->(21,21)
                (20,20)->(19,19),(18,18)
                        (18,18)->(17,17)
Extracting max for 5 times from heap2...#2
Tree 1: (32,32)->(31,31),(30,30),(28,28),(24,24)
        (30,30)->(29,29)
        (28,28)->(27,27),(26,26)
                (26,26)->(25,25)
        (24,24)->(23,23),(22,22),(20,20)
                (22,22)->(21,21)
                (20,20)->(19,19),(18,18)
                        (18,18)->(17,17)
Extracting max for 5 times from heap2...#3
Tree 1: (31,31)
Tree 2: (30,30)->(29,29)
Tree 3: (28,28)->(27,27),(26,26)
        (26,26)->(25,25)
Tree 4: (24,24)->(23,23),(22,22),(20,20)
        (22,22)->(21,21)
        (20,20)->(19,19),(18,18)
                (18,18)->(17,17)
Extracting max for 5 times from heap2...#4
Tree 1: (30,30)->(29,29)
Tree 2: (28,28)->(27,27),(26,26)
        (26,26)->(25,25)
Tree 3: (24,24)->(23,23),(22,22),(20,20)
        (22,22)->(21,21)
        (20,20)->(19,19),(18,18)
                (18,18)->(17,17)
Extracting max for 5 times from heap2...#5
Tree 1: (29,29)
Tree 2: (28,28)->(27,27),(26,26)
        (26,26)->(25,25)
Tree 3: (24,24)->(23,23),(22,22),(20,20)
        (22,22)->(21,21)
        (20,20)->(19,19),(18,18)
                (18,18)->(17,17)

heap1
Tree 1: (15,15)->(14,14),(4,4),(12,12)
        (14,14)->(13,13)
        (12,12)->(11,11),(10,10)
                (10,10)->(9,9)
Tree 2: (14,5)
Tree 3: (13,3)->(8,1)
Tree 4: (8,8)->(7,7),(6,6)
heap2
Tree 1: (29,29)
Tree 2: (28,28)->(27,27),(26,26)
        (26,26)->(25,25)
Tree 3: (24,24)->(23,23),(22,22),(20,20)
        (22,22)->(21,21)
        (20,20)->(19,19),(18,18)
                (18,18)->(17,17)

Melding heap1 and heap2...
Tree 1: (29,29)
Tree 2: (28,28)->(27,27),(26,26)
        (26,26)->(25,25)
Tree 3: (24,24)->(23,23),(22,22),(20,20)
        (22,22)->(21,21)
        (20,20)->(19,19),(18,18)
                (18,18)->(17,17)
Tree 4: (15,15)->(14,14),(4,4),(12,12)
        (14,14)->(13,13)
        (12,12)->(11,11),(10,10)
                (10,10)->(9,9)
Tree 5: (14,5)
Tree 6: (13,3)->(8,1)
Tree 7: (8,8)->(7,7),(6,6)
Delete operation in meldHeap...
Tree 1: (29,29)->(14,5),(13,3),(8,8)
        (13,3)->(8,1)
        (8,8)->(7,7),(6,6)
Tree 2: (28,28)->(27,27),(26,26),(15,15),(24,24)
        (26,26)->(25,25)
        (15,15)->(14,14),(12,12)
                (14,14)->(13,13)
                (12,12)->(11,11),(10,10)
                        (10,10)->(9,9)
        (24,24)->(23,23),(22,22),(20,20)
                (22,22)->(21,21)
                (20,20)->(19,19),(18,18)
                        (18,18)->(17,17)
Delete operation in meldHeap...
Tree 1: (29,29)->(14,5),(13,3),(8,8)
        (13,3)->(8,1)
        (8,8)->(7,7),(6,6)
Tree 2: (28,28)->(27,27),(26,26),(15,15),(24,24)
        (26,26)->(25,25)
        (15,15)->(14,14),(12,12)
                (14,14)->(13,13)
                (12,12)->(10,10)
                        (10,10)->(9,9)
        (24,24)->(23,23),(22,22),(20,20)
                (22,22)->(21,21)
                (20,20)->(19,19),(18,18)
                        (18,18)->(17,17)
Delete operation in meldHeap...
Tree 1: (29,29)->(28,28),(14,5),(13,3),(8,8)
        (28,28)->(27,27),(26,26),(15,15),(24,24)
                (26,26)->(25,25)
                (15,15)->(14,14)
                        (14,14)->(13,13)
                (24,24)->(23,23),(22,22),(20,20)
                        (22,22)->(21,21)
                        (20,20)->(19,19),(18,18)
                                (18,18)->(17,17)
        (13,3)->(8,1)
        (8,8)->(7,7),(6,6)
Tree 2: (12,12)->(9,9)
Empty check for meldHeap...
Not Empty
Max Node Find operation...
Max Node: 29 29
clearing meld heap...
Tree 1: (28,28)->(27,27),(26,26),(15,15),(24,24)
        (26,26)->(25,25)
        (15,15)->(14,14)
                (14,14)->(13,13)
        (24,24)->(23,23),(22,22),(20,20)
                (22,22)->(21,21)
                (20,20)->(19,19),(18,18)
                        (18,18)->(17,17)
Tree 2: (14,5)
Tree 3: (13,3)->(12,12),(8,1),(8,8)
        (12,12)->(9,9)
        (8,8)->(7,7),(6,6)
Tree 1: (27,27)->(26,26),(14,5)
        (26,26)->(25,25)
Tree 2: (15,15)->(14,14)
        (14,14)->(13,13)
Tree 3: (24,24)->(23,23),(22,22),(20,20),(13,3)
        (22,22)->(21,21)
        (20,20)->(19,19),(18,18)
                (18,18)->(17,17)
        (13,3)->(12,12),(8,1),(8,8)
                (12,12)->(9,9)
                (8,8)->(7,7),(6,6)
Tree 1: (26,26)->(25,25),(15,15)
        (15,15)->(14,14)
                (14,14)->(13,13)
Tree 2: (14,5)
Tree 3: (24,24)->(23,23),(22,22),(20,20),(13,3)
        (22,22)->(21,21)
        (20,20)->(19,19),(18,18)
                (18,18)->(17,17)
        (13,3)->(12,12),(8,1),(8,8)
                (12,12)->(9,9)
                (8,8)->(7,7),(6,6)
Tree 1: (25,25)->(15,15),(14,5)
        (15,15)->(14,14)
                (14,14)->(13,13)
Tree 2: (24,24)->(23,23),(22,22),(20,20),(13,3)
        (22,22)->(21,21)
        (20,20)->(19,19),(18,18)
                (18,18)->(17,17)
        (13,3)->(12,12),(8,1),(8,8)
                (12,12)->(9,9)
                (8,8)->(7,7),(6,6)
Tree 1: (24,24)->(23,23),(22,22),(20,20),(13,3)
        (22,22)->(21,21)
        (20,20)->(19,19),(18,18)
                (18,18)->(17,17)
        (13,3)->(12,12),(8,1),(8,8)
                (12,12)->(9,9)
                (8,8)->(7,7),(6,6)
Tree 2: (15,15)->(14,14)
        (14,14)->(13,13)
Tree 3: (14,5)
Tree 1: (23,23)->(20,20),(15,15),(14,5),(13,3)
        (20,20)->(19,19),(18,18)
                (18,18)->(17,17)
        (15,15)->(14,14)
                (14,14)->(13,13)
        (13,3)->(12,12),(8,1),(8,8)
                (12,12)->(9,9)
                (8,8)->(7,7),(6,6)
Tree 2: (22,22)->(21,21)
Tree 1: (22,22)->(21,21),(15,15),(20,20),(13,3)
        (15,15)->(14,14)
                (14,14)->(13,13)
        (20,20)->(19,19),(18,18)
                (18,18)->(17,17)
        (13,3)->(12,12),(8,1),(8,8)
                (12,12)->(9,9)
                (8,8)->(7,7),(6,6)
Tree 2: (14,5)
Tree 1: (21,21)->(20,20),(15,15),(14,5),(13,3)
        (20,20)->(19,19),(18,18)
                (18,18)->(17,17)
        (15,15)->(14,14)
                (14,14)->(13,13)
        (13,3)->(12,12),(8,1),(8,8)
                (12,12)->(9,9)
                (8,8)->(7,7),(6,6)
Tree 1: (20,20)->(19,19),(18,18)
        (18,18)->(17,17)
Tree 2: (15,15)->(14,14)
        (14,14)->(13,13)
Tree 3: (14,5)
Tree 4: (13,3)->(12,12),(8,1),(8,8)
        (12,12)->(9,9)
        (8,8)->(7,7),(6,6)
Tree 1: (19,19)->(15,15),(14,5)
        (15,15)->(14,14)
                (14,14)->(13,13)
Tree 2: (18,18)->(17,17)
Tree 3: (13,3)->(12,12),(8,1),(8,8)
        (12,12)->(9,9)
        (8,8)->(7,7),(6,6)
Tree 1: (18,18)->(17,17),(15,15)
        (15,15)->(14,14)
                (14,14)->(13,13)
Tree 2: (14,5)
Tree 3: (13,3)->(12,12),(8,1),(8,8)
        (12,12)->(9,9)
        (8,8)->(7,7),(6,6)
Tree 1: (17,17)->(15,15),(14,5)
        (15,15)->(14,14)
                (14,14)->(13,13)
Tree 2: (13,3)->(12,12),(8,1),(8,8)
        (12,12)->(9,9)
        (8,8)->(7,7),(6,6)
Tree 1: (15,15)->(14,14)
        (14,14)->(13,13)
Tree 2: (14,5)
Tree 3: (13,3)->(12,12),(8,1),(8,8)
        (12,12)->(9,9)
        (8,8)->(7,7),(6,6)
Tree 1: (14,5)
Tree 2: (14,14)->(13,13)
Tree 3: (13,3)->(12,12),(8,1),(8,8)
        (12,12)->(9,9)
        (8,8)->(7,7),(6,6)
Tree 1: (14,14)->(13,13)
Tree 2: (13,3)->(12,12),(8,1),(8,8)
        (12,12)->(9,9)
        (8,8)->(7,7),(6,6)
Tree 1: (13,13)
Tree 2: (13,3)->(12,12),(8,1),(8,8)
        (12,12)->(9,9)
        (8,8)->(7,7),(6,6)
Tree 1: (13,3)->(12,12),(8,1),(8,8)
        (12,12)->(9,9)
        (8,8)->(7,7),(6,6)
Tree 1: (12,12)->(9,9)
Tree 2: (8,1)
Tree 3: (8,8)->(7,7),(6,6)
Tree 1: (9,9)->(8,1)
Tree 2: (8,8)->(7,7),(6,6)
Tree 1: (8,1)
Tree 2: (8,8)->(7,7),(6,6)
Tree 1: (8,8)->(7,7),(6,6)
Tree 1: (7,7)->(6,6)
Tree 1: (6,6)
Heap is empty
heap3...
Emptying heap3...
Tree 1: (4,4)->(3,3),(2,2)
        (2,2)->(1,1)
Tree 1: (3,3)
Tree 2: (2,2)->(1,1)
Tree 1: (2,2)->(1,1)
Tree 1: (1,1)
Heap is empty
operation from empty heap (extract_max) : {expecting error message}
Heap is empty
operation from empty heap(delete_node) : {expecting error message}
Heap is empty
Heap is empty
